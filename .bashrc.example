# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#    ;;
#*)
#    ;;
#esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


## SSH-Agent
# этот блок автоматом запускает ssh-агент или подключается к уже имеющемуся
if [ -z "$(pgrep ssh-agent)" ]; then
    rm -rf /tmp/ssh-*
    eval $(ssh-agent -s) > /dev/null
else
    export SSH_AGENT_PID=$(pgrep ssh-agent)
    export SSH_AUTH_SOCK=$(find /tmp/ssh-* -name 'agent.*')
fi

## NICER-BASH-PROMPT - get from https://github.com/RaSla/sh/blob/main/nicer-bash-prompt_dev.sh
NICER_BASH_SH=~/git/nicer-bash-prompt_dev.sh
if [ -f $NICER_BASH_SH ]; then . $NICER_BASH_SH ; fi
NICER_K8S=1
NICER_VENV=1

## vars
if [ -f ~/.env ]; then . ~/.env ; fi
export EDITOR="nano"
export KUBE_EDITOR="nano"
# export PATH=~/.local/bin:$PATH
# mkdir -p ~/.local/bin

# restic generate --bash-completion ~/git/restic.bash.completion
RESTIC_BASH=~/git/restic.bash.completion
if [ -f $RESTIC_BASH ]; then . $RESTIC_BASH ; fi
alias restic15v2d='restic -r rest:http://172.28.35.148:8000/nexus3 -p ~/git/.resticpass15v2'
# restic $RESTIC15V2D snapshots
RESTIC15V2D="-r rest:http://172.28.35.148:8000/nexus3 -p $HOME/git/.resticpass15v2"
RESTIC15V2N="-r rest:http://172.28.35.148:8000/nexus2 -p $HOME/git/.resticpass15v2"
RESTIC15V2K="-r rest:http://172.28.35.148:8000/keycloak -p $HOME/git/.resticpass15v2"

##  completions
if [ $(which helm | wc -l) = "1" ]; then source <(helm completion bash) ; fi
if [ $(which kubectl | wc -l) = "1" ]; then source <(kubectl completion bash) ; fi
if [ $(which kustomize | wc -l) = "1" ]; then source <(kustomize completion bash) ; fi
alias helmls="helm ls --time-format='2006-01-02 15:04:05 Z0700'"

B64_FILE=~/git/__.b64
alias b64dec='base64 -d $B64_FILE; echo ""'
alias b64enc='base64 $B64_FILE; echo ""'
alias b64enc0='base64 -w0 $B64_FILE; echo ""'

## InfoSec
NUCL="docker run -it --name nucl projectdiscovery/nuclei"
# $NUCL -u rasla.ru
